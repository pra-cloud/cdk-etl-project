from constructs import Construct

from aws_cdk import (
    Duration,
    Stack,
    aws_s3 as s3,
    aws_glue as glue,
    aws_lambda as lambda_,
    aws_events as events,
    aws_events_targets as targets,
    aws_redshift as redshift,
    aws_codepipeline as codepipeline,
    aws_codepipeline_actions as codepipeline_actions,
)


class SecondStack(Stack):
    def __init__(self, scope: Construct, construct_id: str, glue_role_arn: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # Create S3 buckets
        bucket1 = s3.Bucket(self, "Bucket1-0789")
        bucket2 = s3.Bucket(self, "Bucket2-0987")
        bucket3 = s3.Bucket(self, "Bucket3-93e3")

        three_crawler_trigger = lambda_.Function(
            self,
            "ThreeCrawlerTrigger",
            runtime=lambda_.Runtime.PYTHON_3_8,
            handler="three_crawler_trigger.lambda_handler",
            code=lambda_.Code.from_asset("lambda")
        )

        second_lambda_function = lambda_.Function(
            self,
            "SecondLambdaFunction",
            runtime=lambda_.Runtime.PYTHON_3_8,
            handler="second_lambda_function.lambda_handler",
            code=lambda_.Code.from_asset("lambda")
        )

        lead_crawler = glue.CfnCrawler(
            self,
            "LeadCrawler",
            role=glue_role_arn,
            database_name="lead-db",
            targets={"s3Targets": [{"path": bucket1.bucket_arn}]},
        )

        activity_crawler = glue.CfnCrawler(
            self,
            "ActivityCrawler",
            role=glue_role_arn,
            database_name="activity-db",
            targets={"s3Targets": [{"path": bucket2.bucket_arn}]},
        )

        task_crawler = glue.CfnCrawler(
            self,
            "TaskCrawler",
            role=glue_role_arn,
            database_name="task-db",
            targets={"s3Targets": [{"path": bucket3.bucket_arn}]},
        )

        # Define Glue crawlers
        crawlers = [
            "LeadCrawler",
            "ActivityCrawler",
            "TaskCrawler"
        ]

        # Create EventBridge rules for each Glue crawler
        for crawler_name in crawlers:
            # Create EventBridge rule
            rule = events.Rule(
                self,
                f"{crawler_name}Rule",
                event_pattern={
                    "source": ["aws.glue"],
                    "detail_type": ["Glue Crawler State Change"],
                    "detail": {"state": ["SUCCEEDED"], "crawlerName": [crawler_name]}
                }
            )

            # Add Lambda function as target for the rule
            rule.add_target(targets.LambdaFunction(second_lambda_function))

        #redshift_cluster 
        
        redshift_cluster = redshift.CfnCluster(self, "RedshiftCluster",
                                            cluster_type="single-node",
                                            db_name="mavirck",
    					                    master_username="admin",
                                            master_user_password="Devops123",
                                            node_type="dc2.large",
                                            multi_az=False,
                                            cluster_subnet_group_name="cluster-subnet-group-1",
                                            iam_roles=["arn:aws:iam::851725461271:role/service-role/AmazonRedshift-CommandsAccessRole-20240224T142103"]
                                            )
        
        cfn_job = glue.CfnJob(self, "MyCfnJob",
            command=glue.CfnJob.JobCommandProperty(
                name="mavrick-cdk-glue-redshift-etl",
                python_version="3",
                script_location="s3://aws-glue-assets-851725461271-ap-south-1/scripts/glue-redshift-join-job.py",
            ),
            role="arn:aws:iam::851725461271:role/service-role/AWSGlueServiceRole-apache-airflow"  # Replace with your IAM role ARN
        )
        

        
